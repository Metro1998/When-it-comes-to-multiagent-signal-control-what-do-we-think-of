"""
reference:
https://github.com/openai/spinningup/blob/master/spinup/algos/pytorch/ppo/ppo.py

Author:Metro
date:2023.1.10
"""

import numpy as np
import torch
from Utils.util import discount_cumsum


class PPOBuffer:
    """
    A buffer for storing trajectories generated by (H)PPO agents interacting with
    parallel sub-environments, and using Generalized Advantage Estimation (GAE-Lambda)
    for calculating the advantages of state-action pairs.
    """

    def __init__(self, num_steps, num_envs, num_agents, obs_dim, act_dim, gamma, lam, device):
        self.obs_buf = np.zeros((num_steps, num_envs, num_agents, obs_dim), dtype=np.float32)
        self.act_dis_buf = np.zeros((num_steps, num_envs, num_agents), dtype=np.float32)
        self.act_con_buf = np.zeros((num_steps, num_envs, num_agents, act_dim), dtype=np.float32)
        self.logp_dis_buf = np.zeros((num_steps, num_envs, num_agents), dtype=np.float32)
        self.logp_con_buf = np.zeros((num_steps, num_envs, num_agents), dtype=np.float32)
        self.adv_buf = np.zeros((num_steps, num_envs, num_agents), dtype=np.float32)
        self.rew_buf = np.zeros((num_steps, num_envs, num_agents), dtype=np.float32)
        self.ret_buf = np.zeros((num_steps, num_envs, num_agents), dtype=np.float32)
        self.val_buf = np.zeros((num_steps, num_envs, num_agents), dtype=np.float32)
        # to indicate whether one specfic agent is one its atomic timestep
        self.active_buf = np.zeros((num_steps, num_envs, num_agents), dtype=np.float32)
        # self.done_buf = np.zeros((num_steps, num_envs), dtype=np.float32)
        self.gamma, self.lam = gamma, lam
        self.device = device
        self.num_steps, self.num_envs, self.num_agents = num_steps, num_envs, num_agents
        self.obs_dim, self.act_dim = obs_dim, act_dim
        self.ptr, self.path_start_dix, self.max_size = 0, 0, num_steps

    def store_trajectories(self, obs, act_dis, act_con, rew, val, logp_dis, logp_con):
        """
`       Append one timestep of agent-environment interaction to the buffer.
        ### Inputs are batch of num_envs * num_agents ###
        """
        assert self.ptr < self.max_size
        self.obs_buf[self.ptr] = obs
        self.act_dis_buf[self.ptr] = act_dis
        self.act_con_buf[self.ptr] = act_con
        self.logp_dis_buf[self.ptr] = logp_dis
        self.logp_con_buf[self.ptr] = logp_con
        self.rew_buf[self.ptr] = rew
        self.val_buf[self.ptr] = val
        self.ptr += 1

    def compute_returns_and_advantages(self, last_val=0):
        """
        Call this when one gets cut off by an epoch ending.
        This uses rewards and value estimates from
        the whole trajectory to compute advantage estimates with GAE-Lambda,
        as well as compute the rewards-to-go for each state, to use as
        the targets for the value function.
        :param last_val: should be next_obs
        :return:
        """

        rews = np.append(self.rew_buf[:self.ptr], last_val)  # just to fill up the space
        vals = np.append(self.val_buf[:self.ptr], last_val)

        # the next two lines implement GAE-Lambda advantage calculation
        deltas = rews[:-1] + self.gamma * vals[1:] - vals[:-1]
        self.adv_buf[:self.ptr] = discount_cumsum(deltas, self.gamma * self.lam)

        # the next line computes rewards-to-go, to be targets for the value function
        self.ret_buf[:self.ptr] = discount_cumsum(rews, self.gamma)[:-1]

    def get(self, batch_size):
        """
        Call this at the end of an epoch to get all of the data from
        the buffer, with advantages appropriately normalized (shifted to have
        mean zero and std one). Also, resets some pointers in the buffer.
        """
        assert self.ptr == self.max_size  # buffer has to be full before you can get
        # (num_steps, num_envs, num_agents, obs_dim) --> (num_agents, num_envs * num_steps, obs_dim)
        # the trajectories of one env is complete
        obs_buf = self.obs_buf[:self.ptr].transpose(2, 1, 0, 3).reshape(self.num_agents, -1, self.obs_dim)
        # (num_steps, num_envs, num_agents) --> (num_agents, num_envs * num_steps)
        act_dis_buf = self.act_dis_buf[:self.ptr].transpose(1, 2, 0).reshape(self.num_agents, -1)
        act_con_buf = self.act_con_buf[:self.ptr].transpose(2, 1, 0, 3).reshape(self.num_agents, -1, self.act_dim)
        logp_dis_buf = self.logp_dis_buf[:self.ptr].transpose(1, 2, 0).reshape(self.num_agents, -1)
        logp_con_buf = self.logp_con_buf[:self.ptr].transpose(1, 2, 0).reshape(self.num_agents, -1)
        adv_buf = self.adv_buf[:self.ptr].transpose(1, 2, 0).reshape(self.num_agents, -1)
        ret_buf = self.ret_buf[:self.ptr].transpose(1, 2, 0).reshape(self.num_agents, -1)

        # the next lines implement the normalization trick
        # obs_buf = (obs_buf - obs_buf.mean(axis=0)) / np.maximum(obs_buf.std(axis=0), 1e-6)
        # note, we are conducting normalization on advantage not on reward
        # adv_buf = (adv_buf - adv_buf.mean()) / np.maximum(adv_buf.std(), 1e-6)

        data = dict(obs=self.obs_buf, act_dis=self.act_dis_buf, act_con=self.act_con_buf, logp_dis=self.logp_dis_buf,
                    logp_con=self.logp_con_buf, adv=self.adv_buf, ret=self.ret_buf)
        return {k: torch.as_tensor(v, dtype=torch.float32) for k, v in data.items()}

    def filter(self):
        """
        Get the obs's mean and std for next update cycle.
        :return:
        """
        obs = self.obs_buf[:self.ptr]

        return obs.mean(axis=0), obs.std(axis=0)

    def clear(self):
        self.ptr, self.path_start_dix = 0, 0


if __name__ == "__main__":
    buffer = PPOBuffer(num_steps=2, num_envs=4, num_agents=3, obs_dim=2, act_dim=1, gamma=0.99, lam=0.8, device="cpu")
    buffer.active_buf = np.array([[
        [0, 1, 0],
        [1, 1, 1],
        [0, 0, 0],
        [1, 0, 1]],
        [[1, 0, 0],
         [1, 0, 1],
         [0, 1, 0],
         [1, 1, 0]
         ]])
    print(buffer.active_buf.shape)
    buffer.active_buf = np.reshape(buffer.active_buf, (2, 4, 3, 1))
    print(buffer.active_buf)
    buffer.obs_buf = np.array([
        [
            [[1.2, 2.1], [1.5, 1.7], [1.5, 1.7]],
            [[1.2, 2.1], [1.5, 1.7], [1.5, 1.7]],
            [[1.2, 2.1], [1.5, 1.7], [1.5, 1.7]],
            [[1.2, 2.1], [1.5, 1.7], [1.5, 1.7]]
        ],
        [
            [[1.2, 2.1], [1.5, 1.7], [1.5, 1.7]],
            [[1.2, 2.1], [1.5, 1.7], [1.5, 1.7]],
            [[1.2, 2.1], [1.5, 1.7], [1.5, 1.7]],
            [[1.2, 2.1], [1.5, 1.7], [1.5, 1.7]]
        ]
    ])
    buffer.obs_buf = buffer.active_buf * buffer.obs_buf

    tmp = np.reshape(buffer.obs_buf, (-1, 2))
    print(tmp)
