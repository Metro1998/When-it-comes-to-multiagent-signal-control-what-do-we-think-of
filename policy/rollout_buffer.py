"""
reference:
https://github.com/openai/spinningup/blob/master/spinup/algos/pytorch/ppo/ppo.py

Author:Metro
date:2023.1.10
"""

import numpy as np


class PPOBuffer:
    """
    A buffer for storing trajectories generated by (H)PPO agents interacting with
    parallel sub-environments, and using Generalized Advantage Estimation (GAE-Lambda)
    for calculating the advantages of obs-action pairs.
    """

    def __init__(self, num_steps, num_agents, obs_dim, act_dim):

        self.obs_buf = np.zeros((num_steps, num_agents, obs_dim), dtype=np.float32)
        self.rew_buf = np.zeros((num_steps, num_agents), dtype=np.float32)
        self.act_con_buf = np.zeros((num_steps, num_agents, act_dim), dtype=np.float32)
        self.act_dis_buf = np.zeros((num_steps, num_agents), dtype=np.int64)
        self.logp_con_buf = np.zeros((num_steps, num_agents, act_dim), dtype=np.float32)
        self.logp_dis_buf = np.zeros((num_steps, num_agents), dtype=np.float32)
        self.ptr, self.max_size = 0, num_steps
        self.end_idx = np.array([0])

    def finish_path(self):
        """
        Call this at the end of a trajectory.
        We are recording the end_idx where the trajectories are continuous, for the recomputation of advantage
        """

        np.append(self.end_idx, self.ptr)

    def store_trajectories(self, obs, rew, act_con, act_dis, logp_con, logp_dis):
        """
`       Append one timestep of agent-environment interaction to the buffer.
        ### Inputs are batch of num_envs * num_agents ###
        """
        assert self.ptr < self.max_size
        self.obs_buf[self.ptr] = obs
        self.rew_buf[self.ptr] = rew
        self.act_con_buf[self.ptr] = act_con
        self.act_dis_buf[self.ptr] = act_dis
        self.logp_con_buf[self.ptr] = logp_con
        self.logp_dis_buf[self.ptr] = logp_dis
        self.ptr += 1

    def get(self):
        """
        Call this at the end of a rollout round to retrieve the full information.
        :return:
        """
        assert self.ptr == self.max_size

        obs = self.obs_buf[:self.ptr]
        rew = self.rew_buf[:self.ptr]
        act_con = self.act_con_buf[:self.ptr]
        act_dis = self.act_dis_buf[:self.ptr]
        logp_con = self.logp_con_buf[:self.ptr]
        logp_dis = self.logp_dis_buf[:self.ptr]

        return obs, rew, act_con, act_dis, logp_con, logp_dis, self.end_idx

    def clear(self):
        self.ptr = 0
        self.end_idx = np.array([0])
